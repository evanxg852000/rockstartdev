{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0","program":"/Users/evance.soumaoro/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","rand_core","/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"std\"","-C","metadata=f2e044e5387389be","-C","extra-filename=-f2e044e5387389be","--out-dir","/Users/evance.soumaoro/Desktop/rockstartdev/rust-c8/target/rls/debug/deps","-L","dependency=/Users/evance.soumaoro/Desktop/rockstartdev/rust-c8/target/rls/debug/deps","--extern","getrandom=/Users/evance.soumaoro/Desktop/rockstartdev/rust-c8/target/rls/debug/deps/libgetrandom-ae94c3ee85b39b32.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/evance.soumaoro/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/evance.soumaoro/Desktop/rockstartdev/rust-c8/target/rls/debug/deps/librand_core-f2e044e5387389be.rmeta"},"prelude":{"crate_id":{"name":"rand_core","disambiguator":[11525124162420687771,9450142781254619310]},"crate_root":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src","external_crates":[{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11705364677140973079,7726573435499814070]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9133280923345920065,5169035037401655959]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9811081489243518189,10016862334390338995]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16815776717140451016,2925157999366951619]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5571127662207602070,12081818010283277997]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9872675523737343627,13016261367480270594]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5564630398057371063,5134587089964058144]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":8,"id":{"name":"hashbrown","disambiguator":[7317189895424764231,14908133925595887831]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":9,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7982293983073241509,18348097174152154939]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3938710137457602349,12366108798000803370]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[124527115135685225,16528639863833681107]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[14633564717342525671,15444589222019281189]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","num":13,"id":{"name":"getrandom","disambiguator":[17790569210990728871,10487431780073824517]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","num":14,"id":{"name":"lazy_static","disambiguator":[7597905496295703443,2961254659781533850]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","num":15,"id":{"name":"spin","disambiguator":[16516965836647271190,3149607340340228727]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","num":16,"id":{"name":"libc","disambiguator":[13472141932123952470,9033048170607305414]}}],"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":408,"byte_end":19474,"line_start":10,"line_end":493,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":166},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":2028,"byte_end":2033,"line_start":53,"line_end":53,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":408,"byte_end":19474,"line_start":10,"line_end":493,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":40},{"krate":0,"index":104},{"krate":0,"index":126},{"krate":0,"index":131},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":146},{"krate":0,"index":153},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":164}],"decl_id":null,"docs":" Random number generation traits","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":1387,"byte_end":1409,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":1410,"byte_end":1449,"line_start":35,"line_end":35,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":166},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":20177,"byte_end":20182,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":167}],"decl_id":null,"docs":" Error type of random number generators","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":20592,"byte_end":20595,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn <E> (err: E) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct from any type supporting `std::error::Error`\n \n Available only when configured with `std`.\n \n See also `From<NonZeroU32>`, which is available with and without `std`.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":20559,"byte_end":20580,"line_start":34,"line_end":34,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":20971,"byte_end":20976,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"inner","qualname":"<Error>::inner","value":"fn (&self) -> &(dyn std::error::Error + Send + Sync + 'static)","parent":null,"children":[],"decl_id":null,"docs":" Reference the inner error (`std` only)\n \n When configured with `std`, this is a trivial operation and never\n panics. Without `std`, this method is simply unavailable.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":20938,"byte_end":20959,"line_start":45,"line_end":45,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":21300,"byte_end":21310,"line_start":55,"line_end":55,"column_start":12,"column_end":22},"name":"take_inner","qualname":"<Error>::take_inner","value":"fn (self) -> Box<dyn std::error::Error + Send + Sync + 'static>","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the inner error (`std` only)\n \n When configured with `std`, this is a trivial operation and never\n panics. Without `std`, this method is simply unavailable.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":21267,"byte_end":21288,"line_start":54,"line_end":54,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":21679,"byte_end":21683,"line_start":64,"line_end":64,"column_start":12,"column_end":16},"name":"code","qualname":"<Error>::code","value":"fn (&self) -> Option<NonZeroU32>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the error code, if any.\n \n If this `Error` was constructed via `From<NonZeroU32>`, then this method\n will return this `NonZeroU32` code (for `no_std` this is always the\n case). Otherwise, this method will return `None`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":40},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":178},{"krate":0,"index":183},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":66},{"krate":0,"index":73},{"krate":0,"index":186},{"krate":0,"index":192},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":89},{"krate":0,"index":95},{"krate":0,"index":102}],"decl_id":null,"docs":" The `BlockRngCore` trait and implementation helpers","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":53},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":25503,"byte_end":25515,"line_start":63,"line_end":63,"column_start":11,"column_end":23},"name":"BlockRngCore","qualname":"::block::BlockRngCore","value":"BlockRngCore","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56}],"decl_id":null,"docs":" A trait for RNGs which do not generate random numbers individually, but in\n blocks (typically `[u32; N]`). This technique is commonly used by\n cryptographic RNGs to improve performance.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":54},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":25569,"byte_end":25573,"line_start":65,"line_end":65,"column_start":10,"column_end":14},"name":"Item","qualname":"::block::BlockRngCore::Item","value":"type Item;","parent":{"krate":0,"index":53},"children":[],"decl_id":null,"docs":" Results element type, e.g. `u32`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":55},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":25730,"byte_end":25737,"line_start":69,"line_end":69,"column_start":10,"column_end":17},"name":"Results","qualname":"::block::BlockRngCore::Results","value":"type Results: AsRef<[Self::Item]> + AsMut<[Self::Item]> + Default;","parent":{"krate":0,"index":53},"children":[],"decl_id":null,"docs":" Results type. This is the 'block' an RNG implementing `BlockRngCore`\n generates, which will usually be an array like `[u32; 16]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":25841,"byte_end":25849,"line_start":72,"line_end":72,"column_start":8,"column_end":16},"name":"generate","qualname":"::block::BlockRngCore::generate","value":"fn (&mut self, results: &mut Self::Results) -> ()","parent":{"krate":0,"index":53},"children":[],"decl_id":null,"docs":" Generate a new block of results.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":178},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":27866,"byte_end":27874,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"BlockRng","qualname":"::block::BlockRng","value":"BlockRng { core }","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":182},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":28028,"byte_end":28032,"line_start":117,"line_end":117,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng::core","value":"R","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":28642,"byte_end":28645,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng<R>>::new","value":"fn (core: R) -> BlockRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":28621,"byte_end":28630,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":29120,"byte_end":29125,"line_start":150,"line_end":150,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng<R>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":29091,"byte_end":29108,"line_start":149,"line_end":149,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":29316,"byte_end":29321,"line_start":157,"line_end":157,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":29295,"byte_end":29304,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":29514,"byte_end":29530,"line_start":164,"line_end":164,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng<R>>::generate_and_set","value":"fn (&mut self, index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":29493,"byte_end":29502,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":33466,"byte_end":33476,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"BlockRng64","qualname":"::block::BlockRng64","value":"BlockRng64 { core }","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":191},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":33703,"byte_end":33707,"line_start":289,"line_end":289,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng64::core","value":"R","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":34371,"byte_end":34374,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng64<R>>::new","value":"fn (core: R) -> BlockRng64<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":34350,"byte_end":34359,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":34883,"byte_end":34888,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng64<R>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":34854,"byte_end":34871,"line_start":323,"line_end":323,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":35079,"byte_end":35084,"line_start":331,"line_end":331,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng64<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":35058,"byte_end":35067,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":35309,"byte_end":35325,"line_start":339,"line_end":339,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng64<R>>::generate_and_set","value":"fn (&mut self, index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":35288,"byte_end":35297,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":104},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/impls.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"impls","qualname":"::impls","value":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/impls.rs","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":124}],"decl_id":null,"docs":" Helper functions for implementing `RngCore` functions.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/impls.rs","byte_start":39229,"byte_end":39245,"line_start":29,"line_end":29,"column_start":8,"column_end":24},"name":"next_u64_via_u32","qualname":"::impls::next_u64_via_u32","value":"fn <R> (rng: &mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `next_u32`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":113},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/impls.rs","byte_start":39792,"byte_end":39811,"line_start":42,"line_end":42,"column_start":8,"column_end":27},"name":"fill_bytes_via_next","qualname":"::impls::fill_bytes_via_next","value":"fn <R> (rng: &mut R, dest: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":120},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/impls.rs","byte_start":42672,"byte_end":42691,"line_start":137,"line_end":137,"column_start":8,"column_end":27},"name":"fill_via_u32_chunks","qualname":"::impls::fill_via_u32_chunks","value":"fn (src: &[u32], dest: &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":121},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/impls.rs","byte_start":43217,"byte_end":43236,"line_start":151,"line_end":151,"column_start":8,"column_end":27},"name":"fill_via_u64_chunks","qualname":"::impls::fill_via_u64_chunks","value":"fn (src: &[u64], dest: &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":122},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/impls.rs","byte_start":43401,"byte_end":43418,"line_start":156,"line_end":156,"column_start":8,"column_end":25},"name":"next_u32_via_fill","qualname":"::impls::next_u32_via_fill","value":"fn <R> (rng: &mut R) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u32` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/impls.rs","byte_start":43574,"byte_end":43591,"line_start":161,"line_end":161,"column_start":8,"column_end":25},"name":"next_u64_via_fill","qualname":"::impls::next_u64_via_fill","value":"fn <R> (rng: &mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":126},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/le.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"le","qualname":"::le","value":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/le.rs","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130}],"decl_id":null,"docs":" Little-Endian utilities\n \n Little-Endian order has been chosen for internal usage; this makes some\n useful functions available.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":129},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/le.rs","byte_start":44740,"byte_end":44753,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::le::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/le.rs","byte_start":44723,"byte_end":44732,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":130},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/le.rs","byte_start":44941,"byte_end":44954,"line_start":42,"line_end":42,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::le::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/le.rs","byte_start":44924,"byte_end":44933,"line_start":41,"line_end":41,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":131},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":5282,"byte_end":5289,"line_start":138,"line_end":138,"column_start":11,"column_end":18},"name":"RngCore","qualname":"::RngCore","value":"RngCore","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135}],"decl_id":null,"docs":" The core of a random number generator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":5598,"byte_end":5606,"line_start":145,"line_end":145,"column_start":8,"column_end":16},"name":"next_u32","qualname":"::RngCore::next_u32","value":"fn (&mut self) -> u32","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Return the next random `u32`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":5944,"byte_end":5952,"line_start":153,"line_end":153,"column_start":8,"column_end":16},"name":"next_u64","qualname":"::RngCore::next_u64","value":"fn (&mut self) -> u64","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Return the next random `u64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":6725,"byte_end":6735,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"fill_bytes","qualname":"::RngCore::fill_bytes","value":"fn (&mut self, dest: &mut [u8]) -> ()","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Fill `dest` with random data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":7462,"byte_end":7476,"line_start":184,"line_end":184,"column_start":8,"column_end":22},"name":"try_fill_bytes","qualname":"::RngCore::try_fill_bytes","value":"fn (&mut self, dest: &mut [u8]) -> Result<(), Error>","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random data.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":136},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":8765,"byte_end":8774,"line_start":209,"line_end":209,"column_start":11,"column_end":20},"name":"CryptoRng","qualname":"::CryptoRng","value":"CryptoRng","parent":null,"children":[],"decl_id":null,"docs":" A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]\n implementation is supposed to be cryptographically secure.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":137},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":9035,"byte_end":9046,"line_start":217,"line_end":217,"column_start":11,"column_end":22},"name":"SeedableRng","qualname":"::SeedableRng","value":"SeedableRng: Sized","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":145}],"decl_id":null,"docs":" A random number generator that can be explicitly seeded.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":138},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":10564,"byte_end":10568,"line_start":263,"line_end":263,"column_start":10,"column_end":14},"name":"Seed","qualname":"::SeedableRng::Seed","value":"type Seed: Sized + Default + AsMut<[u8]>;","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Seed type, which is restricted to types mutably-dereferencable as `u8`\n arrays (we recommend `[u8; N]` for some `N`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":12150,"byte_end":12159,"line_start":290,"line_end":290,"column_start":8,"column_end":17},"name":"from_seed","qualname":"::SeedableRng::from_seed","value":"fn (seed: Self::Seed) -> Self","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Create a new PRNG using the given seed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":12976,"byte_end":12989,"line_start":306,"line_end":306,"column_start":8,"column_end":21},"name":"seed_from_u64","qualname":"::SeedableRng::seed_from_u64","value":"fn (mut state: u64) -> Self","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Create a new PRNG using a `u64` seed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":15284,"byte_end":15292,"line_start":356,"line_end":356,"column_start":8,"column_end":16},"name":"from_rng","qualname":"::SeedableRng::from_rng","value":"fn <R> (mut rng: R) -> Result<Self, Error>","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Create a new PRNG seeded from another `Rng`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":16078,"byte_end":16090,"line_start":377,"line_end":377,"column_start":8,"column_end":20},"name":"from_entropy","qualname":"::SeedableRng::from_entropy","value":"fn () -> Self","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":" Creates a new instance of the RNG seeded via [`getrandom`].","sig":null,"attributes":[{"value":"cfg(feature = \"getrandom\")","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":16043,"byte_end":16070,"line_start":376,"line_end":376,"column_start":5,"column_end":32}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":20335,"byte_end":20340,"line_start":28,"line_end":28,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":21927,"byte_end":21932,"line_start":74,"line_end":74,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":22208,"byte_end":22213,"line_start":85,"line_end":85,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":22496,"byte_end":22501,"line_start":97,"line_end":97,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":22784,"byte_end":22789,"line_start":109,"line_end":109,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":22950,"byte_end":22955,"line_start":116,"line_end":116,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":23192,"byte_end":23201,"line_start":127,"line_end":127,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":23364,"byte_end":23373,"line_start":134,"line_end":134,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":28169,"byte_end":28177,"line_start":121,"line_end":121,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":28473,"byte_end":28481,"line_start":131,"line_end":131,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":29740,"byte_end":29748,"line_start":171,"line_end":171,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":31871,"byte_end":31879,"line_start":239,"line_end":239,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":33844,"byte_end":33854,"line_start":293,"line_end":293,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":34200,"byte_end":34210,"line_start":304,"line_end":304,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":35567,"byte_end":35577,"line_start":347,"line_end":347,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":37601,"byte_end":37611,"line_start":414,"line_end":414,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":38049,"byte_end":38057,"line_start":433,"line_end":433,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":17237,"byte_end":17240,"line_start":415,"line_end":415,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":17730,"byte_end":17737,"line_start":438,"line_end":438,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":18130,"byte_end":18133,"line_start":450,"line_end":450,"column_start":43,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":2056,"byte_end":2061,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":40}},{"kind":"Mod","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":2071,"byte_end":2076,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":104}},{"kind":"Mod","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":2086,"byte_end":2088,"line_start":59,"line_end":59,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":126}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":20335,"byte_end":20340,"line_start":28,"line_end":28,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":21927,"byte_end":21932,"line_start":74,"line_end":74,"column_start":23,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":166},"to":{"krate":2,"index":6704}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":22208,"byte_end":22213,"line_start":85,"line_end":85,"column_start":27,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":166},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":22496,"byte_end":22501,"line_start":97,"line_end":97,"column_start":33,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":166},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":22784,"byte_end":22789,"line_start":109,"line_end":109,"column_start":28,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":166},"to":{"krate":1,"index":1537}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":22950,"byte_end":22955,"line_start":116,"line_end":116,"column_start":31,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":1,"index":2379},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":23192,"byte_end":23201,"line_start":127,"line_end":127,"column_start":23,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":170},"to":{"krate":2,"index":6704}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/error.rs","byte_start":23364,"byte_end":23373,"line_start":134,"line_end":134,"column_start":28,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":170},"to":{"krate":1,"index":1537}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":28169,"byte_end":28177,"line_start":121,"line_end":121,"column_start":51,"column_end":59},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":178},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":28473,"byte_end":28481,"line_start":131,"line_end":131,"column_start":23,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":29740,"byte_end":29748,"line_start":171,"line_end":171,"column_start":45,"column_end":53},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":178},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":31871,"byte_end":31879,"line_start":239,"line_end":239,"column_start":53,"column_end":61},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":178},"to":{"krate":0,"index":137}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":33844,"byte_end":33854,"line_start":293,"line_end":293,"column_start":51,"column_end":61},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":186},"to":{"krate":2,"index":6702}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":34200,"byte_end":34210,"line_start":304,"line_end":304,"column_start":23,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":35567,"byte_end":35577,"line_start":347,"line_end":347,"column_start":45,"column_end":55},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":186},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":37601,"byte_end":37611,"line_start":414,"line_end":414,"column_start":53,"column_end":63},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":186},"to":{"krate":0,"index":137}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/block.rs","byte_start":38049,"byte_end":38057,"line_start":433,"line_end":433,"column_start":49,"column_end":57},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":178},"to":{"krate":0,"index":136}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":9048,"byte_end":9053,"line_start":217,"line_end":217,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":137}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":17237,"byte_end":17240,"line_start":415,"line_end":415,"column_start":39,"column_end":42},"kind":{"Impl":{"id":17}},"from":{"krate":5,"index":75},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":17730,"byte_end":17737,"line_start":438,"line_end":438,"column_start":24,"column_end":31},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":131},"to":{"krate":1,"index":2751}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.0/src/lib.rs","byte_start":18130,"byte_end":18133,"line_start":450,"line_end":450,"column_start":43,"column_end":46},"kind":{"Impl":{"id":19}},"from":{"krate":5,"index":75},"to":{"krate":0,"index":136}}]}