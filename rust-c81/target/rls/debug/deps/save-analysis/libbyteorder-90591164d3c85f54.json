{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2","program":"/Users/evance.soumaoro/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","byteorder","/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=90591164d3c85f54","-C","extra-filename=-90591164d3c85f54","--out-dir","/Users/evance.soumaoro/Desktop/rockstartdev/rust-c8/target/rls/debug/deps","-L","dependency=/Users/evance.soumaoro/Desktop/rockstartdev/rust-c8/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/evance.soumaoro/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/evance.soumaoro/Desktop/rockstartdev/rust-c8/target/rls/debug/deps/libbyteorder-90591164d3c85f54.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[4684904497708512050,17434856470889510]},"crate_root":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src","external_crates":[{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11705364677140973079,7726573435499814070]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9133280923345920065,5169035037401655959]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9811081489243518189,10016862334390338995]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16815776717140451016,2925157999366951619]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5571127662207602070,12081818010283277997]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9872675523737343627,13016261367480270594]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5564630398057371063,5134587089964058144]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":8,"id":{"name":"hashbrown","disambiguator":[7317189895424764231,14908133925595887831]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":9,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7982293983073241509,18348097174152154939]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3938710137457602349,12366108798000803370]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[124527115135685225,16528639863833681107]}},{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[14633564717342525671,15444589222019281189]}}],"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":0,"byte_end":26742,"line_start":1,"line_end":779,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1429,"byte_end":1441,"line_start":48,"line_end":48,"column_start":15,"column_end":27},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":77},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1443,"byte_end":1456,"line_start":48,"line_end":48,"column_start":29,"column_end":42},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":163},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1458,"byte_end":1463,"line_start":48,"line_end":48,"column_start":44,"column_end":49},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":25},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1465,"byte_end":1471,"line_start":48,"line_end":48,"column_start":51,"column_end":57},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":0,"byte_end":26742,"line_start":1,"line_end":779,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":19},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":152}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","sig":null,"attributes":[{"value":"crate_name = \"byteorder\"","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1201,"byte_end":1229,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1298,"byte_end":1320,"line_start":42,"line_end":42,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":25},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":26890,"byte_end":26896,"line_start":9,"line_end":9,"column_start":10,"column_end":16},"name":"Result","qualname":"::new::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A short-hand for `result::Result<T, byteorder::Error>`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":164},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27411,"byte_end":27424,"line_start":24,"line_end":24,"column_start":5,"column_end":18},"name":"UnexpectedEOF","qualname":"::new::Error::UnexpectedEOF","value":"Error::UnexpectedEOF","parent":{"krate":0,"index":163},"children":[],"decl_id":null,"docs":" An unexpected EOF.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":166},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27495,"byte_end":27497,"line_start":26,"line_end":26,"column_start":5,"column_end":7},"name":"Io","qualname":"::new::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":163},"children":[],"decl_id":null,"docs":" Any underlying IO error that occurs while reading bytes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":163},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27222,"byte_end":27227,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"name":"Error","qualname":"::new::Error","value":"Error::{UnexpectedEOF, Io}","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":166}],"decl_id":null,"docs":" An error type for reading bytes.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29212,"byte_end":29224,"line_start":86,"line_end":86,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::new::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68}],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29461,"byte_end":29468,"line_start":92,"line_end":92,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::new::ReadBytesExt::read_u8","value":"fn (&mut self) -> Result<u8>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29444,"byte_end":29453,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29814,"byte_end":29821,"line_start":103,"line_end":103,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::new::ReadBytesExt::read_i8","value":"fn (&mut self) -> Result<i8>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29797,"byte_end":29806,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30042,"byte_end":30050,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::new::ReadBytesExt::read_u16","value":"fn <T> (&mut self) -> Result<u16>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30025,"byte_end":30034,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30288,"byte_end":30296,"line_start":119,"line_end":119,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::new::ReadBytesExt::read_i16","value":"fn <T> (&mut self) -> Result<i16>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30271,"byte_end":30280,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30537,"byte_end":30545,"line_start":127,"line_end":127,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::new::ReadBytesExt::read_u32","value":"fn <T> (&mut self) -> Result<u32>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30520,"byte_end":30529,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30783,"byte_end":30791,"line_start":135,"line_end":135,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::new::ReadBytesExt::read_i32","value":"fn <T> (&mut self) -> Result<i32>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30766,"byte_end":30775,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31032,"byte_end":31040,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::new::ReadBytesExt::read_u64","value":"fn <T> (&mut self) -> Result<u64>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31015,"byte_end":31024,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31278,"byte_end":31286,"line_start":151,"line_end":151,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::new::ReadBytesExt::read_i64","value":"fn <T> (&mut self) -> Result<i64>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31261,"byte_end":31270,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31528,"byte_end":31537,"line_start":159,"line_end":159,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::new::ReadBytesExt::read_uint","value":"fn <T> (&mut self, nbytes: usize) -> Result<u64>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31511,"byte_end":31520,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31820,"byte_end":31828,"line_start":167,"line_end":167,"column_start":8,"column_end":16},"name":"read_int","qualname":"::new::ReadBytesExt::read_int","value":"fn <T> (&mut self, nbytes: usize) -> Result<i64>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31803,"byte_end":31812,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32152,"byte_end":32160,"line_start":176,"line_end":176,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::new::ReadBytesExt::read_f32","value":"fn <T> (&mut self) -> Result<f32>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32135,"byte_end":32144,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32441,"byte_end":32449,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::new::ReadBytesExt::read_f64","value":"fn <T> (&mut self) -> Result<f64>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32424,"byte_end":32433,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":77},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33908,"byte_end":33921,"line_start":231,"line_end":231,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::new::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107}],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34159,"byte_end":34167,"line_start":237,"line_end":237,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::new::WriteBytesExt::write_u8","value":"fn (&mut self, n: u8) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34142,"byte_end":34151,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34460,"byte_end":34468,"line_start":246,"line_end":246,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::new::WriteBytesExt::write_i8","value":"fn (&mut self, n: i8) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34443,"byte_end":34452,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34635,"byte_end":34644,"line_start":252,"line_end":252,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::new::WriteBytesExt::write_u16","value":"fn <T> (&mut self, n: u16) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34618,"byte_end":34627,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34882,"byte_end":34891,"line_start":260,"line_end":260,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::new::WriteBytesExt::write_i16","value":"fn <T> (&mut self, n: i16) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34865,"byte_end":34874,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35132,"byte_end":35141,"line_start":268,"line_end":268,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::new::WriteBytesExt::write_u32","value":"fn <T> (&mut self, n: u32) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35115,"byte_end":35124,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35379,"byte_end":35388,"line_start":276,"line_end":276,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::new::WriteBytesExt::write_i32","value":"fn <T> (&mut self, n: i32) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35362,"byte_end":35371,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35629,"byte_end":35638,"line_start":284,"line_end":284,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::new::WriteBytesExt::write_u64","value":"fn <T> (&mut self, n: u64) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35612,"byte_end":35621,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35876,"byte_end":35885,"line_start":292,"line_end":292,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::new::WriteBytesExt::write_i64","value":"fn <T> (&mut self, n: i64) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35859,"byte_end":35868,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36280,"byte_end":36290,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::new::WriteBytesExt::write_uint","value":"fn <T> (&mut self, n: u64, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36263,"byte_end":36272,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36748,"byte_end":36757,"line_start":318,"line_end":318,"column_start":8,"column_end":17},"name":"write_int","qualname":"::new::WriteBytesExt::write_int","value":"fn <T> (&mut self, n: i64, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36731,"byte_end":36740,"line_start":317,"line_end":317,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37103,"byte_end":37112,"line_start":331,"line_end":331,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::new::WriteBytesExt::write_f32","value":"fn <T> (&mut self, n: f32) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37086,"byte_end":37095,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37393,"byte_end":37402,"line_start":340,"line_end":340,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::new::WriteBytesExt::write_f64","value":"fn <T> (&mut self, n: f64) -> Result<()>","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37376,"byte_end":37385,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":115},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3037,"byte_end":3046,"line_start":116,"line_end":116,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135}],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3154,"byte_end":3162,"line_start":120,"line_end":120,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3289,"byte_end":3297,"line_start":125,"line_end":125,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3424,"byte_end":3432,"line_start":130,"line_end":130,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3604,"byte_end":3613,"line_start":136,"line_end":136,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3758,"byte_end":3767,"line_start":141,"line_end":141,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3902,"byte_end":3911,"line_start":146,"line_end":146,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4046,"byte_end":4055,"line_start":151,"line_end":151,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4273,"byte_end":4283,"line_start":157,"line_end":157,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"fn (buf: &mut [u8], n: u64, nbytes: usize) -> ()","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4441,"byte_end":4449,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4424,"byte_end":4433,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4629,"byte_end":4637,"line_start":171,"line_end":171,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4612,"byte_end":4621,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4817,"byte_end":4825,"line_start":179,"line_end":179,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4800,"byte_end":4809,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5050,"byte_end":5058,"line_start":188,"line_end":188,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5033,"byte_end":5042,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5300,"byte_end":5308,"line_start":196,"line_end":196,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5283,"byte_end":5292,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5527,"byte_end":5535,"line_start":204,"line_end":204,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5510,"byte_end":5519,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5733,"byte_end":5742,"line_start":212,"line_end":212,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5716,"byte_end":5725,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5934,"byte_end":5943,"line_start":220,"line_end":220,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5917,"byte_end":5926,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6135,"byte_end":6144,"line_start":228,"line_end":228,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6118,"byte_end":6127,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6419,"byte_end":6428,"line_start":237,"line_end":237,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"fn (buf: &mut [u8], n: i64, nbytes: usize) -> ()","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6402,"byte_end":6411,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6682,"byte_end":6691,"line_start":245,"line_end":245,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6665,"byte_end":6674,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6920,"byte_end":6929,"line_start":253,"line_end":253,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6903,"byte_end":6912,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":136},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7200,"byte_end":7209,"line_start":262,"line_end":262,"column_start":49,"column_end":58},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7152,"byte_end":7190,"line_start":262,"line_end":262,"column_start":1,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":137},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7398,"byte_end":7410,"line_start":268,"line_end":268,"column_start":49,"column_end":61},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7350,"byte_end":7388,"line_start":268,"line_end":268,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":138},"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7600,"byte_end":7612,"line_start":275,"line_end":275,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7558,"byte_end":7590,"line_start":274,"line_end":274,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27538,"byte_end":27543,"line_start":29,"line_end":29,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27630,"byte_end":27635,"line_start":33,"line_end":33,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27915,"byte_end":27920,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28165,"byte_end":28170,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32734,"byte_end":32735,"line_start":194,"line_end":194,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37692,"byte_end":37693,"line_start":349,"line_end":349,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":8457,"byte_end":8466,"line_start":304,"line_end":304,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":9944,"byte_end":9956,"line_start":361,"line_end":361,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27538,"byte_end":27543,"line_start":29,"line_end":29,"column_start":26,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":163},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27630,"byte_end":27635,"line_start":33,"line_end":33,"column_start":26,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":1,"index":2379},"to":{"krate":2,"index":2042}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27915,"byte_end":27920,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":163},"to":{"krate":2,"index":6704}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28165,"byte_end":28170,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":163},"to":{"krate":1,"index":1537}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29230,"byte_end":29234,"line_start":86,"line_end":86,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":2751},"to":{"krate":0,"index":36}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32734,"byte_end":32735,"line_start":194,"line_end":194,"column_start":45,"column_end":46},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":72},"to":{"krate":0,"index":36}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33927,"byte_end":33932,"line_start":231,"line_end":231,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2801},"to":{"krate":0,"index":77}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37692,"byte_end":37693,"line_start":349,"line_end":349,"column_start":47,"column_end":48},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":111},"to":{"krate":0,"index":77}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":8457,"byte_end":8466,"line_start":304,"line_end":304,"column_start":20,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":136},"to":{"krate":0,"index":115}},{"span":{"file_name":"/Users/evance.soumaoro/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":9944,"byte_end":9956,"line_start":361,"line_end":361,"column_start":20,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":137},"to":{"krate":0,"index":115}}]}